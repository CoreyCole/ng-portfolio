{
  "_args": [
    [
      {
        "raw": "gulp-istanbul@https://registry.npmjs.org/gulp-istanbul/-/gulp-istanbul-1.1.2.tgz",
        "scope": null,
        "escapedName": "gulp-istanbul",
        "name": "gulp-istanbul",
        "rawSpec": "https://registry.npmjs.org/gulp-istanbul/-/gulp-istanbul-1.1.2.tgz",
        "spec": "https://registry.npmjs.org/gulp-istanbul/-/gulp-istanbul-1.1.2.tgz",
        "type": "remote"
      },
      "/Users/clutch/Workspace/ng-portfolio/functions/node_modules/firebase-admin"
    ]
  ],
  "_from": "gulp-istanbul@https://registry.npmjs.org/gulp-istanbul/-/gulp-istanbul-1.1.2.tgz",
  "_id": "gulp-istanbul@1.1.2",
  "_inCache": true,
  "_location": "/firebase-admin/gulp-istanbul",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gulp-istanbul@https://registry.npmjs.org/gulp-istanbul/-/gulp-istanbul-1.1.2.tgz",
    "scope": null,
    "escapedName": "gulp-istanbul",
    "name": "gulp-istanbul",
    "rawSpec": "https://registry.npmjs.org/gulp-istanbul/-/gulp-istanbul-1.1.2.tgz",
    "spec": "https://registry.npmjs.org/gulp-istanbul/-/gulp-istanbul-1.1.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [],
  "_resolved": "https://registry.npmjs.org/gulp-istanbul/-/gulp-istanbul-1.1.2.tgz",
  "_shasum": "af65fa28bfdb3576daab95dcfaa732a6a27c5a07",
  "_shrinkwrap": null,
  "_spec": "gulp-istanbul@https://registry.npmjs.org/gulp-istanbul/-/gulp-istanbul-1.1.2.tgz",
  "_where": "/Users/clutch/Workspace/ng-portfolio/functions/node_modules/firebase-admin",
  "author": {
    "name": "Simon Boudrias",
    "email": "admin@simonboudrias.com",
    "url": "https://github.com/SBoudrias"
  },
  "bugs": {
    "url": "https://github.com/SBoudrias/gulp-istanbul/issues"
  },
  "dependencies": {
    "gulp-util": "^3.0.1",
    "istanbul": "^0.4.0",
    "istanbul-threshold-checker": "^0.2.1",
    "lodash": "^4.0.0",
    "through2": "^2.0.0",
    "vinyl-sourcemaps-apply": "^0.2.1"
  },
  "description": "Istanbul unit test coverage plugin for gulp.",
  "devDependencies": {
    "gulp": "^3.6.2",
    "gulp-mocha": "^3.0.1",
    "gulp-sourcemaps": "^2.2.0",
    "isparta": "^4.0.0",
    "jshint": "^2.5.0",
    "mocha": "^3.0.2",
    "rimraf": "^2.2.8"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/SBoudrias/gulp-istanbul",
  "keywords": [
    "gulpplugin",
    "coverage",
    "istanbul",
    "unit test"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "gulp-istanbul",
  "optionalDependencies": {},
  "readme": "gulp-istanbul [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\n===========================\n\n[Istanbul][istanbul] unit test coverage plugin for [gulp][gulp].\n\nWorks on top of any Node.js unit test framework.\n\nInstallation\n---------------\n\n```shell\nnpm install --save-dev gulp-istanbul\n```\n\nExample\n---------------\n\nIn your `gulpfile.js`:\n\n#### Node.js testing\n\n```javascript\nvar istanbul = require('gulp-istanbul');\n// We'll use mocha in this example, but any test framework will work\nvar mocha = require('gulp-mocha');\n\ngulp.task('pre-test', function () {\n  return gulp.src(['lib/**/*.js'])\n    // Covering files\n    .pipe(istanbul())\n    // Force `require` to return covered files\n    .pipe(istanbul.hookRequire());\n});\n\ngulp.task('test', ['pre-test'], function () {\n  return gulp.src(['test/*.js'])\n    .pipe(mocha())\n    // Creating the reports after tests ran\n    .pipe(istanbul.writeReports())\n    // Enforce a coverage of at least 90%\n    .pipe(istanbul.enforceThresholds({ thresholds: { global: 90 } }));\n});\n```\n\n**Note:** Version 4.x.x of `gulp-mocha` is not supported (see issue [#115](https://github.com/SBoudrias/gulp-istanbul/issues/115) for details). In this example, you should use `gulp-mocha` version 3.0.1 for the time being.\n\n#### Browser testing\n\nFor browser testing, you'll need to write the files covered by istanbul in a directory from where you'll serve these files to the browser running the test. You'll also need a way to extract the value of the [coverage variable](#coveragevariable) after the test have runned in the browser.\n\nBrowser testing is hard. If you're not sure what to do, then I suggest you take a look at [Karma test runner](http://karma-runner.github.io) - it has built-in coverage using Istanbul.\n\n\n```javascript\nvar istanbul = require('gulp-istanbul');\n\n\ngulp.task('pre-test', function () {\n  return gulp.src(['lib/**/*.js'])\n    // Covering files\n    .pipe(istanbul())\n    // Write the covered files to a temporary directory\n    .pipe(gulp.dest('test-tmp/'));\n});\n\ngulp.task('test', ['pre-test'], function () {\n  // Make sure your tests files are requiring files from the\n  // test-tmp/ directory\n  return gulp.src(['test/*.js'])\n    .pipe(testFramework())\n    // Creating the reports after tests ran\n    .pipe(istanbul.writeReports());\n});\n```\n\n#### Source Maps\ngulp-istanbul supports [gulp-sourcemaps][gulp-sourcemaps] when instrumenting:\n\n\n```javascript\ngulp.task('pre-test', function () {\n  return gulp.src(['lib/**/*.js'])\n    // optionally load existing source maps\n    .pipe(sourcemaps.init())\n    // Covering files\n    .pipe(istanbul())\n    .pipe(sourcemaps.write('.'))\n    // Write the covered files to a temporary directory\n    .pipe(gulp.dest('test-tmp/'));\n});\n```\n\nAPI\n--------------\n\n### istanbul(opt)\n\nInstrument files passed in the stream.\n\n#### opt\nType: `Object` (optional)\n```js\n{\n  coverageVariable: 'someVariable',\n  ...other Instrumeter options...\n}\n```\n\n##### coverageVariable\nType: `String` (optional)\nDefault: `'$$cov_' + new Date().getTime() + '$$'`\n\nThe global variable istanbul uses to store coverage\n\nSee also:\n- [istanbul coverageVariable][istanbul-coverage-variable]\n- [SanboxedModule][sandboxed-module-coverage-variable]\n\n##### includeUntested\nType: `Boolean` (optional)\nDefault: `false`\n\nFlag to include test coverage of files that aren't `require`d by any tests\n\nSee also:\n- [istanbul \"0% coverage\" issue](https://github.com/gotwarlost/istanbul/issues/112)\n\n##### instrumenter\nType: `Instrumenter` (optional)\nDefault: `istanbul.Instrumenter`\n\nCustom Instrumenter to be used instead of the default istanbul one.\n\n```js\nvar isparta = require('isparta');\nvar istanbul = require('gulp-istanbul');\n\ngulp.src('lib/**.js')\n  .pipe(istanbul({\n    // supports es6\n    instrumenter: isparta.Instrumenter\n  }));\n```\n\nSee also:\n- [isparta](https://github.com/douglasduteil/isparta)\n\n##### Other Istanbul Instrumenter options\n\nSee:\n- [istanbul Instrumenter documentation][istanbul-coverage-variable]\n\n### istanbul.hookRequire()\n\nOverwrite `require` so it returns the covered files. The method take an optional [option object](https://gotwarlost.github.io/istanbul/public/apidocs/classes/Hook.html#method_hookRequire).\n\nAlways use this option if you're running tests in Node.js\n\n### istanbul.summarizeCoverage(opt)\n\nget coverage summary details\n\n#### opt\nType: `Object` (optional)\n```js\n{\n  coverageVariable: 'someVariable'\n}\n```\n##### coverageVariable\nType: `String` (optional)\nDefault: `'$$cov_' + new Date().getTime() + '$$'`\n\nThe global variable istanbul uses to store coverage\n\nSee also:\n- [istanbul coverageVariable][istanbul-coverage-variable]\n- [SanboxedModule][sandboxed-module-coverage-variable]\n\n#### returns\nType: `Object`\n```js\n{\n  lines: { total: 4, covered: 2, skipped: 0, pct: 50 },\n  statements: { total: 4, covered: 2, skipped: 0, pct: 50 },\n  functions: { total: 2, covered: 0, skipped: 0, pct: 0 },\n  branches: { total: 0, covered: 0, skipped: 0, pct: 100 }\n}\n```\n\nSee also:\n- [istanbul utils.summarizeCoverage()][istanbul-summarize-coverage]\n\n\n### istanbul.writeReports(opt)\n\nCreate the reports on stream end.\n\n#### opt\nType: `Object` (optional)\n```js\n{\n  dir: './coverage',\n  reporters: [ 'lcov', 'json', 'text', 'text-summary', CustomReport ],\n  reportOpts: { dir: './coverage' },\n  coverageVariable: 'someVariable'\n}\n```\n\nYou can pass individual configuration to a reporter.\n```js\n{\n  dir: './coverage',\n  reporters: [ 'lcovonly', 'json', 'text', 'text-summary', CustomReport ],\n  reportOpts: {\n    lcov: {dir: 'lcovonly', file: 'lcov.info'}\n    json: {dir: 'json', file: 'converage.json'}\n  },\n  coverageVariable: 'someVariable'\n}\n```\n##### dir\nType: `String` (optional)\nDefault: `./coverage`\n\nThe folder in which the reports are to be outputted.\n\n##### reporters\nType: `Array` (optional)\nDefault: `[ 'lcov', 'json', 'text', 'text-summary' ]`\n\nThe list of available reporters:\n- `clover`\n- `cobertura`\n- `html`\n- `json`\n- `lcov`\n- `lcovonly`\n- `none`\n- `teamcity`\n- `text`\n- `text-summary`\n\nYou can also specify one or more custom reporter objects as items in the array. These will be automatically registered with istanbul.\n\nSee also `require('istanbul').Report.getReportList()`\n\n##### reportOpts\nType: `Object` (optional)\n```js\n{\n  dir: './coverage'\n}\n```\n\nYou can also configure separate directory for each report.\n```js\n{\n  html: {\n        dir: './coverage/html',\n        watermarks: {\n            statements: [ 50, 80 ],\n            lines: [ 50, 80 ],\n            functions: [ 50, 80],\n            branches: [ 50, 80 ]\n        }\n    },\n    lcov: {dir: './coverage/lcov'},\n    lcovonly: {dir: './coverage/lcovonly'},\n    json: {dir: './coverage/json'},\n}\n```\n`watermarks` can be used to confgure the color of the HTML report. \nDefault colors are.. RED: below 50% coverage, YELLOW: 50-80% coverage, GREEN: above 80% \n\n##### coverageVariable\nType: `String` (optional)\nDefault: `'$$cov_' + new Date().getTime() + '$$'`\n\nThe global variable istanbul uses to store coverage\n\nSee also:\n- [istanbul coverageVariable][istanbul-coverage-variable]\n- [SanboxedModule][sandboxed-module-coverage-variable]\n\n\n### istanbul.enforceThresholds(opt)\n\nChecks coverage against minimum acceptable thresholds. Fails the build if any of the thresholds are not met.\n\n#### opt\nType: `Object` (optional)\n```js\n{\n  coverageVariable: 'someVariable',\n  thresholds: {\n    global: 60,\n    each: -10\n  }\n}\n```\n\n##### coverageVariable\nType: `String` (optional)\nDefault: `'$$cov_' + new Date().getTime() + '$$'`\n\nThe global variable istanbul uses to store coverage\n\n\n##### thresholds\nType: `Object` (required)\n\nMinimum acceptable coverage thresholds. Any coverage values lower than the specified threshold will fail the build.\n\nEach threshold value can be:\n- A positive number - used as a percentage\n- A negative number - used as the maximum amount of coverage gaps\n- A falsey value will skip the coverage\n\nThresholds can be specified across all files (`global`) or per file (`each`):\n```\n{\n  global: 80,\n  each: 60\n}\n```\n\nYou can also specify a value for each metric:\n```\n{\n  global: {\n    statements: 80,\n    branches: 90,\n    lines: 70,\n    functions: -10\n  }\n  each: {\n    statements: 100,\n    branches: 70,\n    lines: -20\n  }\n}\n```\n\n#### emits\n\nA plugin error in the stream if the coverage fails\n\nLicense\n------------\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License) (c) Simon Boudrias - 2013\n\n[istanbul]: http://gotwarlost.github.io/istanbul/\n[gulp]: https://github.com/gulpjs/gulp\n[gulp-sourcemaps]: https://github.com/floridoo/gulp-sourcemaps\n\n[npm-url]: https://npmjs.org/package/gulp-istanbul\n[npm-image]: https://badge.fury.io/js/gulp-istanbul.svg\n\n[travis-url]: http://travis-ci.org/SBoudrias/gulp-istanbul\n[travis-image]: https://secure.travis-ci.org/SBoudrias/gulp-istanbul.svg?branch=master\n\n[depstat-url]: https://david-dm.org/SBoudrias/gulp-istanbul\n[depstat-image]: https://david-dm.org/SBoudrias/gulp-istanbul.svg\n\n[istanbul-coverage-variable]: http://gotwarlost.github.io/istanbul/public/apidocs/classes/Instrumenter.html\n[istanbul-summarize-coverage]: http://gotwarlost.github.io/istanbul/public/apidocs/classes/ObjectUtils.html#method_summarizeCoverage\n[sandboxed-module-coverage-variable]: https://github.com/felixge/node-sandboxed-module/blob/master/lib/sandboxed_module.js#L240\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/SBoudrias/gulp-istanbul.git"
  },
  "scripts": {
    "pretest": "jshint index.js ./test/.",
    "test": "mocha -R spec"
  },
  "version": "1.1.2"
}

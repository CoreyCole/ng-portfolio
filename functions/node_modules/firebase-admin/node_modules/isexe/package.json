{
  "_args": [
    [
      {
        "raw": "isexe@https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
        "scope": null,
        "escapedName": "isexe",
        "name": "isexe",
        "rawSpec": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
        "spec": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
        "type": "remote"
      },
      "/Users/clutch/Workspace/ng-portfolio/functions/node_modules/firebase-admin"
    ]
  ],
  "_from": "isexe@https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
  "_id": "isexe@2.0.0",
  "_inCache": true,
  "_location": "/firebase-admin/isexe",
  "_phantomChildren": {},
  "_requested": {
    "raw": "isexe@https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
    "scope": null,
    "escapedName": "isexe",
    "name": "isexe",
    "rawSpec": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
    "spec": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/firebase-admin",
    "/firebase-admin/which"
  ],
  "_resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
  "_shasum": "e8fbf374dc556ff8947a10dcb0572d633f2cfa10",
  "_shrinkwrap": null,
  "_spec": "isexe@https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
  "_where": "/Users/clutch/Workspace/ng-portfolio/functions/node_modules/firebase-admin",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/isaacs/isexe/issues"
  },
  "dependencies": {},
  "description": "Minimal module to check if a file is executable.",
  "devDependencies": {
    "mkdirp": "^0.5.1",
    "rimraf": "^2.5.0",
    "tap": "^10.3.0"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/isaacs/isexe#readme",
  "keywords": [],
  "license": "ISC",
  "main": "index.js",
  "name": "isexe",
  "optionalDependencies": {},
  "readme": "# isexe\n\nMinimal module to check if a file is executable, and a normal file.\n\nUses `fs.stat` and tests against the `PATHEXT` environment variable on\nWindows.\n\n## USAGE\n\n```javascript\nvar isexe = require('isexe')\nisexe('some-file-name', function (err, isExe) {\n  if (err) {\n    console.error('probably file does not exist or something', err)\n  } else if (isExe) {\n    console.error('this thing can be run')\n  } else {\n    console.error('cannot be run')\n  }\n})\n\n// same thing but synchronous, throws errors\nvar isExe = isexe.sync('some-file-name')\n\n// treat errors as just \"not executable\"\nisexe('maybe-missing-file', { ignoreErrors: true }, callback)\nvar isExe = isexe.sync('maybe-missing-file', { ignoreErrors: true })\n```\n\n## API\n\n### `isexe(path, [options], [callback])`\n\nCheck if the path is executable.  If no callback provided, and a\nglobal `Promise` object is available, then a Promise will be returned.\n\nWill raise whatever errors may be raised by `fs.stat`, unless\n`options.ignoreErrors` is set to true.\n\n### `isexe.sync(path, [options])`\n\nSame as `isexe` but returns the value and throws any errors raised.\n\n### Options\n\n* `ignoreErrors` Treat all errors as \"no, this is not executable\", but\n  don't raise them.\n* `uid` Number to use as the user id\n* `gid` Number to use as the group id\n* `pathExt` List of path extensions to use instead of `PATHEXT`\n  environment variable on Windows.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/isaacs/isexe.git"
  },
  "scripts": {
    "postpublish": "git push origin --all; git push origin --tags",
    "postversion": "npm publish",
    "preversion": "npm test",
    "test": "tap test/*.js --100"
  },
  "version": "2.0.0"
}
